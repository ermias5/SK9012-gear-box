<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
    width="297.000mm" height="210.000mm" viewBox="0 0 297 210"
    stroke-linejoin="round" stroke-linecap="round" fill="none" fill-rule="evenodd">

  <desc>Composer Export</desc>

  <script type="text/ecmascript"><![CDATA[
    if (typeof(top) != "undefined") {
        top.ShowPaper = ShowPaper;
    }

    function ShowHotSpot(evt, hotspotid) {
        var svgDocument = evt.target.ownerDocument;
        var strId = "hotspot." + hotspotid;
        var hotspot = svgDocument.getElementById(strId);
        if (hotspot) hotspot.setAttribute("opacity", ".5");
    }

    function HideHotSpot(evt, hotspotid) {
        var svgDocument = evt.target.ownerDocument;
        var strId = "hotspot." + hotspotid;
        var hotspot = svgDocument.getElementById(strId);
        if (hotspot) hotspot.setAttribute("opacity", "0");

        var toolTip = svgDocument.getElementById('ToolTip');
        if (toolTip) toolTip.setAttribute("visibility", "hidden");
    }

    function ShowToolTip(evt, hotspotid, strTooltip) {
        if (strTooltip == "") return;

        var svgDocument = evt.target.ownerDocument;
        var tiptext = svgDocument.getElementById('ToolTipText');
        if (!tiptext) return;
        tiptext.firstChild.nodeValue = " " + strTooltip + "  ";

        var toolTip = svgDocument.getElementById('ToolTip');
        if (!toolTip) return;

        toolTip.setAttribute("visibility", "visible");
        toolTip.setAttribute("opacity", ".95");

        var root = svgDocument.documentElement;
        var vbox = (root.getAttribute("viewBox")).split(' ');
        var x0 = parseFloat(vbox[0]);
        var y0 = parseFloat(vbox[1]);
        var vboxW = parseFloat(vbox[2]);
        var vboxH = parseFloat(vbox[3]);

        var strW = root.getAttribute("width");
        var svgW = parseFloat(strW);
        if (strW.indexOf('mm') != -1) svgW *= 3.779;

        var strH = root.getAttribute("height");
        var svgH = parseFloat(strH);
        if (strH.indexOf('mm') != -1) svgH *= 3.779;

        var realx0 = x0, realy0 = y0, realvboxW = vboxW, realvboxH = vboxH;
        var realsvgW = svgW, realsvgH = svgH;

        if ((typeof(top) == "undefined") || (typeof(top.svgctl1) != "undefined")) {
            svgW = window.innerWidth;
            svgH = window.innerHeight;

            realsvgW = svgW;
            realsvgH = svgH;

            if ((svgW / svgH) > (vboxW / vboxH)) {
                realvboxW = (vboxH * svgW) / svgH;
                realx0 = x0 - (realvboxW - vboxW) / 2;
            } else {
                realvboxH = (vboxW * svgH) / svgW;
                realy0 = y0 - (realvboxH - vboxH) / 2;
            }
        }

        var newScale = root.currentScale;
        var translation = root.currentTranslate;

        var xPos = (((evt.clientX + 10 - translation.x) / newScale) * realvboxW) / realsvgW + realx0;
        var yPos = (((evt.clientY + 5 - translation.y) / newScale) * realvboxH) / realsvgH + realy0;
        var scaleForWidth = ((1 / newScale) * realvboxH) / realsvgH;

        toolTip.setAttribute("transform", "translate(" + xPos + "," + yPos + ")");

        var fontsize = 12;
        tiptext.setAttribute("font-size", fontsize * scaleForWidth);
        tiptext.setAttribute("y", fontsize * scaleForWidth);

        var tipBG = svgDocument.getElementById('ToolTipBG');
        var outline = tiptext.getBBox();
        if (tipBG) {
            tipBG.setAttribute("stroke-width", 1 * scaleForWidth);
            tipBG.setAttribute("width", Number(outline.width));
            tipBG.setAttribute("height", Number(outline.height) + fontsize * .5 * scaleForWidth);
        }

        var ToolTipShadow = svgDocument.getElementById('ToolTipShadow');
        if (ToolTipShadow) {
            ToolTipShadow.setAttribute("width", Number(outline.width));
            ToolTipShadow.setAttribute("height", Number(outline.height) + fontsize * .5 * scaleForWidth);
            ToolTipShadow.setAttribute("x", 3 * scaleForWidth);
            ToolTipShadow.setAttribute("y", 3 * scaleForWidth);
        }
    }

    function ShowPaper() {
        var svgDocument = getDocument();
        var paper = svgDocument.getElementById("paperID");
        if (paper) {
            paper.setAttribute("transform", "scale(1)");
            paper.setAttribute("opacity", "1");
            paper.setAttribute("visibility", "visible");
        }
        var svg = svgDocument.getRootElement();
        if (svg) {
            svg.setAttribute("width", "307.000mm");
            svg.setAttribute("height", "220.000mm");
            svg.setAttribute("viewBox", "-5 -5 307 220");
        }
    }
  ]]></script>

  <defs>
    <mask id="mask0" x="0" y="0" height="100%" width="100%">
      <image x="119.4796" y="184.1407" height="22.33161" width="26.17877"
        xlink:href="ANIMATION_files/9cd182ef2acaff61_mask_0.jpg" />
    </mask>
  </defs>

  <g>
    <g />
    <g>
      <g />
      <g>
        <path style="stroke:#0000ff; stroke-width:0.125;fill:#0000ff"
          d="M107.65,3.65L162.92,3.65L162.92,13.80L107.65,13.80z" />
        <text xml:space="preserve" fill="#ffffff" stroke-width="0.2" x="108.92" y="10.63"
          font-size="6.55" opacity="1.00" font-family="Eurostile">
          ANIMATION VIDEO
        </text>
      </g>
    </g>
<g>
  <!-- Thin border rectangle with matching radius -->
  <rect x="43.74" y="46.70" 
        width="200" height="125"
        rx="8" ry="8"  
        fill="none"
        stroke="#0066cc" 
        stroke-width="1.5" 
        stroke-linejoin="round"/>
        
  <!-- Video container with matching dimensions -->
  <foreignObject x="43.74" y="46.70" 
                width="200" height="125"
                requiredExtensions="http://www.w3.org/1999/xhtml">
    <body xmlns="http://www.w3.org/1999/xhtml" 
          style="margin:0;padding:0;width:100%;height:100%;overflow:hidden;">
      <video width="100%" 
             height="100%"
             controls="controls"
             style="object-fit:contain;
                    border-radius:6px;
                    display:block;
                    ">
        <source src="ANIMATION.mp4" type="video/mp4"/>
        Your browser does not support HTML5 video.
      </video>
    </body>
  </foreignObject>
</g>
    

  <!-- hover color for home icon -->
    <g id="hotspot.0" 
   ident="home_button" 
   onmouseover="ShowHotSpot(evt,'0')" 
   onmouseout="HideHotSpot(evt,'0')" 
   opacity="0">
  <a xlink:href="HOME.SVG" xlink:title="redirect to home page">
    <path style="fill:#0066ff;
                fill-rule:evenodd;
                stroke:#003399;
                stroke-width:0.5;
                cursor:pointer"
          d="M131.13,179.98
             h33.45
             a5,5 0 0 1 5,5
             v20.69
             a5,5 0 0 1 -5,5
             h-33.45
             a5,5 0 0 1 -5,-5
             v-20.69
             a5,5 0 0 1 5,-5
             z"
          rx="5" 
          ry="5"/>
  </a>
</g>
    
    <g id="ToolTip" 
       visibility="hidden" 
       opacity="0" 
       transform="translate(0,0)">
      <rect id="ToolTipShadow" 
            opacity="0.20" 
            fill="black" 
            stroke="none" 
            x="0" 
            y="0" 
            width="30" 
            height="8"/>
      <rect id="ToolTipBG" 
            fill="#ffffe1" 
            stroke="black" 
            x="0" 
            y="0" 
            width="30" 
            height="8"/>
      <text xml:space="preserve" 
            id="ToolTipText" 
            fill="black" 
            x="0" 
            y="0" 
            width="30" 
            height="8">tooltip</text>
    </g>
  </g>
</svg>
